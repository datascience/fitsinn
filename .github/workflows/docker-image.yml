name: Docker Image CI

on:
  push:
    branches: [main, dev, release/*]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Cache local Maven repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Extract Git metadata
        id: vars
        run: |
          echo "GIT_SHA_SHORT=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
          echo "BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> "$GITHUB_ENV"
          echo "GIT_TAG=${GITHUB_REF#refs/tags/}" >> "$GITHUB_ENV"

      - name: Print GitHub ref and other variables
        run: |
          echo "GitHub ref: $GITHUB_REF"
          echo "Git tag: $GIT_TAG"
          echo "Branch name: $BRANCH_NAME"
          echo "Commit SHA: $GIT_SHA_SHORT"

      - name: Build and push FITSInn REST
        run: |
          IMAGE_NAME=artourkin/fitsinn-rest
          CONTEXT=.
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            docker buildx build --push --tag $IMAGE_NAME:latest $CONTEXT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            docker buildx build --push --tag $IMAGE_NAME:$GIT_TAG $CONTEXT
          else
            docker buildx build --push --tag $IMAGE_NAME:$BRANCH_NAME-$GIT_SHA_SHORT $CONTEXT
          fi

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Build and push FITSInn WEB
        run: |
          IMAGE_NAME=artourkin/fitsinn-web
          CONTEXT=./web
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            docker buildx build --push --tag $IMAGE_NAME:latest $CONTEXT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            docker buildx build --push --tag $IMAGE_NAME:$GIT_TAG $CONTEXT
          else
            docker buildx build --push --tag $IMAGE_NAME:$BRANCH_NAME-$GIT_SHA_SHORT $CONTEXT
          fi

      - name: Build and push FITS WEB
        run: |
          IMAGE_NAME=artourkin/fits-web
          CONTEXT=./fits
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            docker buildx build --push --tag $IMAGE_NAME:latest $CONTEXT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            docker buildx build --push --tag $IMAGE_NAME:$GIT_TAG $CONTEXT
          else
            docker buildx build --push --tag $IMAGE_NAME:$BRANCH_NAME-$GIT_SHA_SHORT $CONTEXT
          fi
    

